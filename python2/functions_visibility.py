# a = 0 # глобальная переменная на уровне файла
#
#
# def func (a): # локальная a
#     a += 1
#     print(a)
#
# func(1) # 2
# func(2) # 3
# print(a) # 0 - исходная a  не поменялась


# a = 0
#
#
# def func(a=a): # именованный аргумент c присвоением локальной переменной a значения глобальной переменной
#     a += 1
#     print(a)
#
#
# func() # 1
# func(2) # 3
# print(a) # 0

# lst = []


# def func(a=lst): # ссылка на объект за пределами функции. делать значениями по умолчанию изменяемые объекты не рекоменд.
#     a.append(1)
#     print(a)
#
#
# func() # [1]
# func() # [1, 1]
# func([]) # [1] - передаем новый объект списка
# func([])
# func([])
# func([])
#
# def func(lst): # если передаем изменяемый типо, то с большой осторожностью нужно МЕНЯТЬ (печатать можно) этот объект внутри функции
#     lst.append(1)
#     print(lst)
#
#
# l = [1, 2, 3, 4, 5]
#
# func(l) # передаем ссылку на список [1, 2, 3, 4, 5, 1]
# func(l) # [1, 2, 3, 4, 5, 1, 1]
# func(l) # [1, 2, 3, 4, 5, 1, 1, 1]
# func(l) # [1, 2, 3, 4, 5, 1, 1, 1, 1]


# b = 1

# Важный момент, как устроена область видимости функции
# Неизменяемые типы:
# Для изменений — только локальные значения
# Для чтения — локальные и глобальные значения
# Изменяемые типы:
# Для изменения и чтения - локальные и глобальные значения
# def func(a):
#     print(a, b) # для чтения переменная b видна
#     print(c) # ошибка
#
#
# func(0)
# 0 1
# NameError: name 'c' is not defined

# как внутри фунции сделать переменную глобальной для использования
# def func(a):
#     global b # иногда бывает необходимо, но в целом лучше так не делать
#     b += 1
#     print(a, b) # для чтения переменная b видна
#
# func(0) # 0 2
#
# b = [1]
#
# def func(a):
#     b.append(1)
#     b.remove(1)
#
#     b = [] # затрет глобальный объект
#     print(a, b)

# файл = модуль
# порядок поиска переменных:
# 1. Локальная область видимости (на уровне функции)
# 2. Глобальная область видимости (на уровне модуля (файла))
# 3. В built-in'ах (глобальные переменные, например print)
